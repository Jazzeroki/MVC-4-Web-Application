using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PowerteqDTModels;
using PowerteqDtData;

namespace PowerteqDTReport.Controllers
{
	public class HomeController : Controller
	{
		private IPowerteqContext PowerteqContext;

		//
		// GET: /Home/
		public HomeController(IPowerteqContext context)
		{
			// This is a disposible resource. There is a better way to get this, but we'll leave it for now.
			PowerteqContext = context;
		}

		public ActionResult Index()
		{
			return View();
		}


		//[HttpGet]
		//public ActionResult Systems()
		//{
		//    return View("Systems");
		//}


		[HttpGet]
		public ActionResult Systems()
		{
			return View(SetupSystemViewModel());
		}

		private Models.SystemViewModel SetupSystemViewModel()
		{
			return new Models.SystemViewModel
			{
				Systems = PowerteqContext.Systems.AsEnumerable()
			};
		}
		[HttpPost]
		public ActionResult Systems(SystemModel system)
		{
			PowerteqContext.Systems.Add(system);
			PowerteqContext.SaveChanges();
			return View(SetupSystemViewModel());
		}
		
		//Test of edit system Model
		[HttpGet]
		public ActionResult EditSystem(int Id)
		{
			//SystemModel System = PowerteqContext.Systems.Find(Id);
			SystemModel System = PowerteqContext.Systems.Where(n => n.ID == Id).SingleOrDefault();
			return View(System);
		}

		[HttpPost]
		public ActionResult EditSystem(SystemModel modifiedSystem)
		{
			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.Systems.Find(modifiedSystem.ID);
				PowerteqContext.Entry(existing).CurrentValues.SetValues(modifiedSystem);
				PowerteqContext.SaveChanges();
			} 
			else
			{
				return View(modifiedSystem);
			}

			return RedirectToAction("Systems");
		}


		//Department Controllers

		//public ActionResult Departments()
		//{
		//    return View("Departments");
		//}
		//public ActionResult DepartmentsEdit()
		//{
		//    return View("DepartmentsEdit");
		//}


		[HttpGet]
		public ActionResult Departments()
		{
			return View(SetupDepartmentViewModel());
		}

		private Models.DepartmentViewModel SetupDepartmentViewModel()
		{
			return new Models.DepartmentViewModel
			{
				Departments = PowerteqContext.Departments.AsEnumerable()
			};
		}
		[HttpPost]
		public ActionResult Departments(DepartmentModel department)
		{
			PowerteqContext.Departments.Add(department);
			PowerteqContext.SaveChanges();
			return View(SetupDepartmentViewModel());
		}

		[HttpGet]
		public ActionResult EditDepartment(int Id)
		{
			DepartmentModel Department = PowerteqContext.Departments.Where(n => n.ID == Id).SingleOrDefault();
			return View(Department);
		}

		[HttpPost]
		public ActionResult EditDepartment(DepartmentModel modifiedDepartment)
		{
			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.Departments.Find(modifiedDepartment.ID);
				PowerteqContext.Entry(existing).CurrentValues.SetValues(modifiedDepartment);
				PowerteqContext.SaveChanges();
			}
			else
			{
				return View(modifiedDepartment);
			}

			return RedirectToAction("Departments");
		}
		

		////Downtime Event Controllers


		//public ActionResult DowntimeEvent()
		//{
		//    return View("DowntimeEvent");
		//}

		[HttpGet]
		public ActionResult DowntimeEvent()
		{
			return View(SetupDowntimeEventViewModel());
		}

		private Models.DowntimeEventViewModel SetupDowntimeEventViewModel()
		{
			return new Models.DowntimeEventViewModel
			{
				DowntimeEvents = PowerteqContext.DowntimeEvents.AsEnumerable()
			};
		}
		[HttpPost]
		public ActionResult DowntimeEvents(DowntimeEventModel downtimeEvent)
		{
			PowerteqContext.DowntimeEvents.Add(downtimeEvent);
			PowerteqContext.SaveChanges();
			return View(SetupDowntimeEventViewModel());
		}

		[HttpGet]
		public ActionResult EditDowntimeEvent(int Id)
		{
			DowntimeEventModel DowntimeEvent = PowerteqContext.DowntimeEvents.Where(n => n.ID == Id).SingleOrDefault();
			return View(DowntimeEvent);
			//SystemModel System = PowerteqContext.Systems.Find(Id);
			//DowntimeEventModel DowntimeEvent = PowerteqContext.DowntimeEvents.ElementAt<DowntimeEventModel>(Id);
			//Models.SystemViewModel sys = new Models.SystemViewModel();
			//sys.System = System;
			//return View(DowntimeEvent);
			//return View(System);
		}

		[HttpPost]
		public ActionResult EditDowntimeEvent(DowntimeEventModel modifiedDowntimeEvent)
		{

			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.DowntimeEvents.Find(modifiedDowntimeEvent.ID);
				PowerteqContext.Entry(existing).CurrentValues.SetValues(modifiedDowntimeEvent);
				PowerteqContext.SaveChanges();
			}
			else
			{
				return View(modifiedDowntimeEvent);
			}

			return RedirectToAction("DowntimeEvents");
		}

		public ActionResult Reports()
		{
			return View("Reports");
		}






		[HttpGet]
		public ActionResult Locations()
		{
			return  View(SetupLocationViewModel());
		}

		private Models.LocationViewModel SetupLocationViewModel()
		{
			return new Models.LocationViewModel
			{
				Locations = PowerteqContext.Locations.AsEnumerable()                
			};
		}
		[HttpPost]
		public ActionResult Locations(LocationModel location)
		{
			PowerteqContext.Locations.Add(location);
			PowerteqContext.SaveChanges();
			return View(SetupLocationViewModel());
		}

		[HttpGet]
		public ActionResult EditLocation(int Id)
		{
			LocationModel Location = PowerteqContext.Locations.Where(n => n.ID == Id).SingleOrDefault();
			return View(Location);
		}

		[HttpPost]
		public ActionResult EditLocation(LocationModel modifiedLocation)
		{
			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.Locations.Find(modifiedLocation.ID);
				PowerteqContext.Entry(existing).CurrentValues.SetValues(modifiedLocation);
				PowerteqContext.SaveChanges();
			}
			else
			{
				return View(modifiedLocation);
			}

			return RedirectToAction("Locations");
		}
		public ActionResult DeleteLocation(LocationModel modifiedLocation)
		{
			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.Locations.Find(modifiedLocation.ID);
				//PowerteqContext.Entry(existing).CurrentValues.SetValues(modifiedLocation);
				PowerteqContext.Locations.Remove(existing);
				PowerteqContext.SaveChanges();
			}
			else
			{
				return View(modifiedLocation);
			}

			return RedirectToAction("Locations");
		}




	}
}
