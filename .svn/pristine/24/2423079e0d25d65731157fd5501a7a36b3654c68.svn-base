using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PowerteqDTModels;
using PowerteqDtData;


namespace PowerteqDTReport.Controllers
{
	public class DowntimeEventController : Controller
	{
		private IPowerteqContext PowerteqContext;

		//
		// GET: /DowntimeEvent/
		public DowntimeEventController(IPowerteqContext context)
		{
			// This is a disposible resource. There is a better way to get this, but we'll leave it for now.
			PowerteqContext = context;
		}

		public ActionResult GetDropdowns()
		{
			return View();
		}

		public ActionResult EditDTEvent(int ID){
			Models.EditDTEventModel DTEvent = new Models.EditDTEventModel();
		
			DTEvent.Systems = PowerteqContext.Systems.AsEnumerable();
			DTEvent.Locations = PowerteqContext.Locations.AsEnumerable();
			DTEvent.Departments = PowerteqContext.Departments.AsEnumerable();
			return View();
		}


		[HttpGet]
		public ActionResult DowntimeEvent()
		{
			return View(SetupDowntimeEventViewModel());
		}

		private Models.DowntimeEventViewModel SetupDowntimeEventViewModel()
		{
			DowntimeEventModel dt = new DowntimeEventModel();

			return new Models.DowntimeEventViewModel
			{
				DowntimeEvent = dt,
				DowntimeEvents = PowerteqContext.DowntimeEvents.ToList(),
				Locations = PowerteqContext.Locations.ToList(),
				Departments = PowerteqContext.Departments.ToList(),
				Systems = PowerteqContext.Systems.ToList()
			};
		}
		[HttpPost]
		public ActionResult DowntimeEvent(DowntimeEventModel downtimeEvent)
		{
			PowerteqContext.DowntimeEvents.Add(downtimeEvent);
			PowerteqContext.SaveChanges();
			return View(SetupDowntimeEventViewModel());
		}

		[HttpGet]
		public ActionResult EditDowntimeEvent(int Id)
		{

			Models.EditDTEventModel DTEvent = new Models.EditDTEventModel();
			DTEvent.DTEvent = PowerteqContext.DowntimeEvents.Where(n => n.ID == Id).SingleOrDefault();
			DTEvent.Systems = PowerteqContext.Systems.ToList();
			DTEvent.Locations = PowerteqContext.Locations.ToList();
			DTEvent.Departments = PowerteqContext.Departments.ToList();

			return View(DTEvent);
		}

		[HttpPost]
		public ActionResult EditDowntimeEvent(PowerteqDTReport.Models.EditDTEventModel modifiedDowntimeEvent)
		{

			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.DowntimeEvents.Find(modifiedDowntimeEvent.DTEvent.ID);
				if (modifiedDowntimeEvent.DTEvent.AffectedDepartments.Count != 0)
				{
					//existing.AffectedDepartments = new List<int>();
					foreach (var x in modifiedDowntimeEvent.DTEvent.AffectedDepartments)
					{
						existing.AffectedDepartments.Add(x);
					}
				}
				if (modifiedDowntimeEvent.DTEvent.AffectedSystems.Count != 0)
				{
					//existing.AffectedSystems = new List<int>();
					foreach (var x in modifiedDowntimeEvent.DTEvent.AffectedSystems)
					{
						existing.AffectedSystems.Add(x);
					}
				}
				PowerteqContext.Entry(existing).CurrentValues.SetValues(modifiedDowntimeEvent.DTEvent);

				PowerteqContext.SaveChanges();
			}
			else
			{
				return View(modifiedDowntimeEvent);
			}

			return RedirectToAction("DowntimeEvent");
		}

		public ActionResult DeleteDowntimeEvent(DowntimeEventModel modifiedDowntimeEvent)
		{
			if (ModelState.IsValid)
			{
				var existing = PowerteqContext.DowntimeEvents.Find(modifiedDowntimeEvent.ID);
				PowerteqContext.DowntimeEvents.Remove(existing);
				PowerteqContext.SaveChanges();
			}
			else
			{
				return View("DowntimeEvents", modifiedDowntimeEvent);
			}

			return RedirectToAction("DowntimeEvents");
		}
	}
}
